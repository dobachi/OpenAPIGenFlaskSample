from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class StockPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, price=None, open=None, high=None, low=None, volume=None):  # noqa: E501
        """StockPrice - a model defined in OpenAPI

        :param price: The price of this StockPrice.  # noqa: E501
        :type price: float
        :param open: The open of this StockPrice.  # noqa: E501
        :type open: float
        :param high: The high of this StockPrice.  # noqa: E501
        :type high: float
        :param low: The low of this StockPrice.  # noqa: E501
        :type low: float
        :param volume: The volume of this StockPrice.  # noqa: E501
        :type volume: float
        """
        self.openapi_types = {
            'price': float,
            'open': float,
            'high': float,
            'low': float,
            'volume': float
        }

        self.attribute_map = {
            'price': 'price',
            'open': 'open',
            'high': 'high',
            'low': 'low',
            'volume': 'volume'
        }

        self._price = price
        self._open = open
        self._high = high
        self._low = low
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt) -> 'StockPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StockPrice of this StockPrice.  # noqa: E501
        :rtype: StockPrice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def price(self) -> float:
        """Gets the price of this StockPrice.

        現在の株価  # noqa: E501

        :return: The price of this StockPrice.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this StockPrice.

        現在の株価  # noqa: E501

        :param price: The price of this StockPrice.
        :type price: float
        """

        self._price = price

    @property
    def open(self) -> float:
        """Gets the open of this StockPrice.

        始値  # noqa: E501

        :return: The open of this StockPrice.
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open: float):
        """Sets the open of this StockPrice.

        始値  # noqa: E501

        :param open: The open of this StockPrice.
        :type open: float
        """

        self._open = open

    @property
    def high(self) -> float:
        """Gets the high of this StockPrice.

        高値  # noqa: E501

        :return: The high of this StockPrice.
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high: float):
        """Sets the high of this StockPrice.

        高値  # noqa: E501

        :param high: The high of this StockPrice.
        :type high: float
        """

        self._high = high

    @property
    def low(self) -> float:
        """Gets the low of this StockPrice.

        安値  # noqa: E501

        :return: The low of this StockPrice.
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low: float):
        """Sets the low of this StockPrice.

        安値  # noqa: E501

        :param low: The low of this StockPrice.
        :type low: float
        """

        self._low = low

    @property
    def volume(self) -> float:
        """Gets the volume of this StockPrice.

        出来高  # noqa: E501

        :return: The volume of this StockPrice.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume: float):
        """Sets the volume of this StockPrice.

        出来高  # noqa: E501

        :param volume: The volume of this StockPrice.
        :type volume: float
        """

        self._volume = volume
