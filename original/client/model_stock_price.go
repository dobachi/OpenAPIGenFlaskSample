/*
Stock API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StockPrice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StockPrice{}

// StockPrice struct for StockPrice
type StockPrice struct {
	// 現在の株価
	Price *float64 `json:"price,omitempty"`
	// 始値
	Open *float64 `json:"open,omitempty"`
	// 高値
	High *float32 `json:"high,omitempty"`
	// 安値
	Low *float32 `json:"low,omitempty"`
	// 出来高
	Volume *float32 `json:"volume,omitempty"`
}

// NewStockPrice instantiates a new StockPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStockPrice() *StockPrice {
	this := StockPrice{}
	return &this
}

// NewStockPriceWithDefaults instantiates a new StockPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStockPriceWithDefaults() *StockPrice {
	this := StockPrice{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *StockPrice) GetPrice() float64 {
	if o == nil || IsNil(o.Price) {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockPrice) GetPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *StockPrice) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *StockPrice) SetPrice(v float64) {
	o.Price = &v
}

// GetOpen returns the Open field value if set, zero value otherwise.
func (o *StockPrice) GetOpen() float64 {
	if o == nil || IsNil(o.Open) {
		var ret float64
		return ret
	}
	return *o.Open
}

// GetOpenOk returns a tuple with the Open field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockPrice) GetOpenOk() (*float64, bool) {
	if o == nil || IsNil(o.Open) {
		return nil, false
	}
	return o.Open, true
}

// HasOpen returns a boolean if a field has been set.
func (o *StockPrice) HasOpen() bool {
	if o != nil && !IsNil(o.Open) {
		return true
	}

	return false
}

// SetOpen gets a reference to the given float64 and assigns it to the Open field.
func (o *StockPrice) SetOpen(v float64) {
	o.Open = &v
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *StockPrice) GetHigh() float32 {
	if o == nil || IsNil(o.High) {
		var ret float32
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockPrice) GetHighOk() (*float32, bool) {
	if o == nil || IsNil(o.High) {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *StockPrice) HasHigh() bool {
	if o != nil && !IsNil(o.High) {
		return true
	}

	return false
}

// SetHigh gets a reference to the given float32 and assigns it to the High field.
func (o *StockPrice) SetHigh(v float32) {
	o.High = &v
}

// GetLow returns the Low field value if set, zero value otherwise.
func (o *StockPrice) GetLow() float32 {
	if o == nil || IsNil(o.Low) {
		var ret float32
		return ret
	}
	return *o.Low
}

// GetLowOk returns a tuple with the Low field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockPrice) GetLowOk() (*float32, bool) {
	if o == nil || IsNil(o.Low) {
		return nil, false
	}
	return o.Low, true
}

// HasLow returns a boolean if a field has been set.
func (o *StockPrice) HasLow() bool {
	if o != nil && !IsNil(o.Low) {
		return true
	}

	return false
}

// SetLow gets a reference to the given float32 and assigns it to the Low field.
func (o *StockPrice) SetLow(v float32) {
	o.Low = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *StockPrice) GetVolume() float32 {
	if o == nil || IsNil(o.Volume) {
		var ret float32
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StockPrice) GetVolumeOk() (*float32, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *StockPrice) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given float32 and assigns it to the Volume field.
func (o *StockPrice) SetVolume(v float32) {
	o.Volume = &v
}

func (o StockPrice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StockPrice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Open) {
		toSerialize["open"] = o.Open
	}
	if !IsNil(o.High) {
		toSerialize["high"] = o.High
	}
	if !IsNil(o.Low) {
		toSerialize["low"] = o.Low
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return toSerialize, nil
}

type NullableStockPrice struct {
	value *StockPrice
	isSet bool
}

func (v NullableStockPrice) Get() *StockPrice {
	return v.value
}

func (v *NullableStockPrice) Set(val *StockPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableStockPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableStockPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockPrice(val *StockPrice) *NullableStockPrice {
	return &NullableStockPrice{value: val, isSet: true}
}

func (v NullableStockPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


